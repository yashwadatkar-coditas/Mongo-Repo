use ToDoDB;

Database Requirements:
Create a database named ToDoDB.
Design a collection named tasks.
Each task should have information like title, description, status (e.g., "Pending," "Completed"), and due date.


switched to db ToDoDB


CRUD Operations:
Create Operation:
Insert at least 5 tasks with various titles, descriptions, statuses, and due dates.


db.tasks.insertMany([
  {
    title: "Task 1",
    description: "Description for Task 1",
    status: "Pending",
    due_date: ISODate("2024-02-20")
  },
  {
    title: "Task 2",
    description: "Description for Task 2",
    status: "Completed",
    due_date: ISODate("2024-02-15")
  },
  {
    title: "Task 3",
    description: "Description for Task 3",
    status: "Pending",
    due_date: ISODate("2024-03-05")
  },
  {
    title: "Task 4",
    description: "Description for Task 4",
    status: "Pending",
    due_date: ISODate("2024-02-25")
  },
  {
    title: "Task 5",
    description: "Description for Task 5",
    status: "Completed",
    due_date: ISODate("2024-02-18")
  }
]);


Read Operation:
Retrieve and display all tasks in the database.

db.tasks.find();

Display the details of a specific task by searching with its title or status.
List all tasks that are pending or completed.
List of all task which is still pending after due date.
Show all task in pending key and completed key {pending: [task....], completed: [task...]}

db.tasks.find({ title: "Task 1" });
db.tasks.find({ status: "Completed" });

db.tasks.find({ status: { $in: ["Pending", "Completed"] } });

db.tasks.aggregate([
  {
    $group: {
      _id: "$status",
      tasks: { $push: "$$ROOT" }
    }
  },
  {
    $project: {
      _id: 0,
      status: "$_id",
      tasks: 1
    }
  }
]);


Update Operation:
Update the status of a specific task (e.g., from "Pending" to "Completed").
Update the due date of a task.
Update all pending task which due date is less than 2 days from today.


db.tasks.updateOne(
  { title: "Task 1" },
  { $set: { status: "Completed" } }
);


db.tasks.updateOne(
  { title: "Task 2" },
  { $set: { due_date: ISODate("2024-02-22") } }
);


db.tasks.updateMany(
  { status: "Pending", due_date: { $lt: new Date(new Date().getTime() + 2 * 24 * 60 * 60 * 1000) } },
  { $set: { status: "Overdue" } }
);



Delete Operation:
Remove a task by its title or status.
Delete all completed tasks.

db.tasks.deleteOne({ title: "Task 3" });
db.tasks.deleteMany({ status: "Completed" });
